
template <Type>
implement ptr<Type> {
    @static
    func Allocate(size: i64)->ptr<Type> {
        var re =  __bit_cast<ptr<undef> ,ptr<Type>>(bindings::malloc(size * __sizeof<Type>()));
        return re;
    }

    @static
    func New()->ptr<Type>{
        var t = ptr<Type>::Allocate(1);
        return t;
    }

    @static
    func Null()->ptr<Type> {
        return __cast<i64, ptr<Type>>(0);
    }

    func Free() {
        bindings::free(__bit_cast<ptr<Type>, ptr<undef>>(this));
    }

    func _ToInt64()->i64{
        return __cast<ptr<Type>, i64>(this);
    }

    func IsNull()->bool{
        return this._ToInt64() == 0;
    }

    func IsValid()->bool {
        return !this.IsNull();
    }
}

template <Type>
implement operator::Equal<ptr<Type>> for ptr<Type> {
    func Equal(operand: ptr<Type>) -> bool {
        return this._ToInt64() == operand._ToInt64();
    }
}


template <Type>
implement operator::NotEqual<ptr<Type>> for ptr<Type> {
    func NotEqual(operand: ptr<Type>) -> bool {
        return !(this == operand);
    }
}



template <Type>
struct Ptr{
    raw_ptr: ptr<Type>;
    size: i64;
    _reference_counter: ptr<i64>;
}

template <Type>
implement Ptr<Type>{
    @static
    func Allocate(size: i64)->Ptr<Type>{
        var self: Ptr<Type>;
        self.raw_ptr =  ptr<Type>::Allocate(size);
        self.size = size;

        for i in 0 to size {
            __initialize<Type>(&self.raw_ptr[i]);
        }

        // self._reference_count; //不需要再次申请, Initialize的时候会产生.
        *self._reference_counter = 1;
        return self;
    }

    @static
    func New()->Ptr<Type>{
        return Allocate(1);
    }

    @static
    func Null()->Ptr<Type>{
        var self: Ptr<Type>;
        self.raw_ptr = ptr<Type>::Null();
        return self;
    }

    func _ToInt64()->i64{
        return __cast<ptr<Type>, i64>(this.raw_ptr);
    }

    // 因为内存计数是直接通过指针地址来记录的. 所以只要他们有相同的机制, 那么指针的传输, 转变不会导致错误.
    func ToUndef()->Ptr<undef>{
        var undef_ptr: Ptr<undef>;
        undef_ptr.raw_ptr = __bit_cast<ptr<Type> ,ptr<undef>>(this.raw_ptr);
        undef_ptr._reference_counter = this._reference_counter;
        *undef_ptr._reference_counter = *undef_ptr._reference_counter + 1;
        return undef_ptr;
    }

    @static
    func FromUndef(undef_ptr: Ptr<undef>)->Ptr<Type>{
        var self: Ptr<Type>;
        self.raw_ptr = __bit_cast<ptr<undef> ,ptr<Type>>(undef_ptr.raw_ptr);
        self._reference_counter = undef_ptr._reference_counter;
        *self._reference_counter = *self._reference_counter + 1;
        return self;
    }

    func IsNull()->bool{
        return this._ToInt64() == 0;
    }

    func IsValid()->bool {
        return !this.IsNull();
    }

    func ReferenceCount()->i64 {
        return *this._reference_counter;
    }

    template <Interface>
    func As()->Dynamic<Interface> {
        return __as<Type, Interface>(this);
    }
}

template <Type>
implement operator::LinearIndex<Type> for Ptr<Type> {
    @inline
    func Get(index: i64)->Type {
        return  this.raw_ptr[index];
    }
    @inline
    func Set(index: i64, value: Type) {
        this.raw_ptr[index] = value;
    }
}

template <Type>
implement ReferenceCountable for Ptr<Type> {
    func RegisterReferenceCount() {
        *this._reference_counter = 0;
    }

    func IncrementReferenceCount() {
        *this._reference_counter = *this._reference_counter + 1;
    }

    func DecrementReferenceCount() {

        if (this._reference_counter.IsNull()){
            return;
        }

        *this._reference_counter = *this._reference_counter - 1;
        if (*this._reference_counter == 0){
            if (!this.IsNull()) {
                for i in 0 to this.size {
                    __destroy<Type>(&this.raw_ptr[i]);
                }

                this.raw_ptr.Free();
                // this._reference_counter.Free(); // 循环里的变量会多次被destroy, 故不能释放
                this.raw_ptr = ptr<Type>::Null();
            }
        }
    }
}

template <Type>
implement Initializable for Ptr<Type> {
    func Initialize() {
        this.raw_ptr = ptr<Type>::Null();
        // 需要申请, 判断的时候需要用到
        this._reference_counter = ptr<i64>::New();
        this.size = 0;
        *this._reference_counter = 1;
    }
}

template <Type>
implement operator::Equal<Ptr<Type>> for Ptr<Type> {
    func Equal(operand: Ptr<Type>) -> bool {
        return this._ToInt64() == operand._ToInt64();
    }
}


template <Type>
implement operator::NotEqual<Ptr<Type>> for Ptr<Type> {
    func NotEqual(operand: Ptr<Type>) -> bool {
        return !(this == operand);
    }
}
