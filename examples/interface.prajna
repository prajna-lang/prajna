interface Say{
    func Say();
}

struct SayHi{
    name: String;
}

implement Say for SayHi{
    func Say() {
        "Hi ".Print();
        this.name.PrintLine();
    }
}

struct SayHello{
    name: String;
}

implement Say for SayHello{
    func Say(){
        "Hello ".Print();
        this.name.PrintLine();
    }
}

func Main(){
    var say_hi = Ptr<SayHi>::New();
    say_hi.name = "Prajna";
    say_hi.Say();
    var d_say: Dynamic<Say> = say_hi.As<Say>(); //Dynamic<Say>也是一个具体的类型, 其会存储Say接口的函数
    d_say.Say();

    var say_hello = Ptr<SayHello>::New();
    say_hello.name = "Paramita";
    say_hello.Say();
    d_say = say_hello.As<Say>();
    d_say.Say();

    // 需要先判断再做转换, 不同于C++, 如果转换类型不合法会直接报错退出
    if (d_say.Is<SayHi>()) {
        var say_hi2 = d_say.Cast<SayHi>();
        say_hi2.Say();
        say_hi.name = "Prajna2 ";
    } {
        var say_hello2 = d_say.Cast<SayHello>();
        say_hello2.Say();
        say_hello2.name = "Paramita2 ";
    }

    d_say.Say();
}

