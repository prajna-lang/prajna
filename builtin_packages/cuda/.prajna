#link("libcudart.so", "linux", "absolute");
#link("libcuda.so", "linux", "absolute");
#link("cudart64_12.dll", "win", "absolute"); // 注意cuda版本， 可能需要修改版本号

@extern
func cuInit(flag:i32)->i32;

@extern
func cuDeviceGetCount(count: ptr<i32>)->i32;

@extern
func cuDeviceGet(device: ptr<i32>, ordinal: i32)->i32;

@extern
func cuDeviceGetAttribute(pi: ptr<i32>, attrib: i32, device: i32)->i32;

@extern
func cuLaunchKernel(kernel_fun_ptr: ptr<i8>, gridDimX : u32, gridDimY: u32, gridDimZ: u32, blockDimX: u32, blockDimY: u32, blockDimZ: u32, shared_mem_bytes: u32, stream: ptr<i8>, kernel_params: ptr<ptr<i8>>, extra: ptr<ptr<i8>>)->i32;

@extern
func cudaDeviceSynchronize()->i32;

@extern
func cuStreamSynchronize(stream: i64)->i32;

// cuda runtime api

@extern
func cudaMalloc(dev_pointer: ptr<ptr<i8>>, size: i64)->i32;

// cudaMemcpyHostToHost = 0
// Host -> Host
// cudaMemcpyHostToDevice = 1
// Host -> Device
// cudaMemcpyDeviceToHost = 2
// Device -> Host
// cudaMemcpyDeviceToDevice = 3
// Device -> Device
// cudaMemcpyDefault = 4

@extern
func cudaSetDevice(id: i64)->i32;

@extern
func cudaMemcpy(dst: ptr<i8>, src: ptr<i8>, memory_bytes : i64, mode : i32)->i32;

// prajna cuca api


