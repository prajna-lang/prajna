template <Dim>
struct Layout{
    shape: Array<i64, Dim>;
    stride: Array<i64, Dim>;
}

template <Dim>
implement Layout<Dim> {
    @static
    func Create(shape: Array<i64, Dim>)->Layout<Dim>{
        var self: Layout<Dim>;
        self.shape = shape;
        var i = Dim - 1;
        self.stride[i] = 1;
        while (i > 0){
            i = i - 1;
            self.stride[i] = self.shape[i + 1] * self.stride[i + 1];
        }
        return self;
    }

    func LinearIndexToArrayIndex(offset: i64)->Array<i64, Dim>{
        var array_idx: Array<i64, Dim>;
        var remain = offset;
        var i = 0;
        while (i < Dim){
            array_idx[i] = remain / this.stride[i];
            remain = remain % this.stride[i];
            i = i + 1;
        }

        return array_idx;
    }

    func ArrayIndexToLinearIndex(idx: Array<i64, Dim>)->i64{
        var offset = 0;
        var i =  Dim - 1;
        while (i >= 0){
            offset = offset + idx[i] * this.stride[i];
            i = i - 1;
        }
        return offset;
    }

    func Length()->i64{
        return this.shape[0] * this.stride[0];
    }

}

template <Type, Dim>
struct Tensor {
    data : Ptr<Type>;
    layout: Layout<Dim>;
}

template <Type, Dim>
interface AtProperty {
    func Get(idx: Array<i64, Dim>)->Type;
    func Set(idx: Array<i64, Dim>, value: Type);
}

template <Type, Dim>
implement AtProperty<Type, Dim> for Tensor<Type, Dim>{
    func Get(idx: Array<i64, Dim>)->Type{
        var offset = this.layout.ArrayIndexToLinearIndex(idx);
        return this.data.raw_ptr[offset];
    }

    func Set(idx: Array<i64, Dim>, value: Type){
        var offset = this.layout.ArrayIndexToLinearIndex(idx);
        this.data.raw_ptr[offset] = value;
    }
}

template <Type, Dim>
implement Tensor<Type, Dim> {
    @static
    func Create(shape :Array<i64, Dim>)->Tensor<Type, Dim>{
        var self: Tensor<Type, Dim>;
        self.layout = Layout<Dim>::Create(shape);

        self.data = Ptr<Type>::Allocate(self.layout.Length());
        return self;
    }
}

template <Type, Dim>
implement operator::ArrayIndex<Type, Dim> for Tensor<Type, Dim> {
    func Get(idx: Array<i64, Dim>)->Type{
        return this.At(idx);
    }

    func Set(idx: Array<i64, Dim>, value: Type){
        this.At(idx) = value;
    }
}
