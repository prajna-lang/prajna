use hash::Hash;

template <Bits>
implement Uint<Bits> {
    @static
    func Min()->Uint<Bits>{
        return 0i64.Cast<Uint<Bits>>();
    }

    @static
    func Max()->Uint<Bits>{
        return !Uint<Bits>::Min();
    }
}


template <Bits>
implement Int<Bits> {
    @static
    func Max()->Int<Bits>{
        var re = __shift_right<Uint<Bits>>(Uint<Bits>::Max(), 1i64.Cast<Uint<Bits>>());
        return re.Cast<Int<Bits>>();
    }

    @static
    func Min()->Int<Bits>{
        return !Int<Bits>::Max();
    }
}



template HashTemplate<RealNumberType,Bits> {
    implement Hash<RealNumberType<Bits>> {
        func __call__(v: RealNumberType<Bits>) -> i64 {
            var hash: i64 = 5381;
            var int_bits = cast<RealNumberType<Bits>, i64>(v);
            hash = ((hash * 32) + hash) + int_bits;
            return hash;
        }
    }    
}

use HashTemplate<Int,8>;
use HashTemplate<Int,16>;
use HashTemplate<Int,32>;
use HashTemplate<Int,64>;
use HashTemplate<Int,128>;

