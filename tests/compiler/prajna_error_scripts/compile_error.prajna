// postfix
12345u24;
12435dd;
3.1415f31;
3.1415tt;
var a: i64 = 1024u32;
// invalid symbol
t;
core::Tensor;
// access filed
var tmp_str = "Hi\n";
tmp_str.+;
tmp_str.data2;
tmp_str[3];
tmp_str(3);
//
&3;
var p:__ptr<i8>;
var g = __bit_cast<__ptr<i8> ,f32>(p);
var gg = __bit_cast<i64 ,__ptr<f32>>(3);

//
var s0 = 3;
var t:s0;

//
// st<i8>;
String::create2(10);
Tensor<i64, 1>::Create<i32>([10]);
core::Tensor2;
core::String<i64>;

Tensor<i, 1>;
// Tensor<i64, 3.13415>;
Tensor<>;
var s22 = 3034;
s22::tmp();
s22<|tmp, tmp|>(ttt);

var bb0 = "Hi\n";
bb0 - 2;
bb0 + 3;

var tt0:i32 = 1024;
var tt1;

for i in 3.14 to 10{}
for i in 10 to 3.14{}
// 4 = 6; 需要修复

Tensor<i64, 1, 2>::Create([10]);

func Get(a: i64, b: f32){}
Get(1, 1);

String::Create(3.1341);

var tt: Tensor<i64, 1>;
tt.At(12.3);

#error("unexpect code load");
#warning("this is a warning!");

var aa = 3;
aa = 3.1415;

use core::t;


var tmp1234 = 3;
var tmp1234 = 4;

func Test(){ var a:i64 = 3i32; }
