

template <Type, Length_>
struct Array{
    data: __array<Type, Length_>;
}

template <Type, Length_>
implement operator::LinearIndex<Type> for Array<Type, Length_> {
    @inline
    func Get(idx: i64)->Type{
        return this.data[idx];
    }

    @inline
    func Set(idx: i64, value: Type){
        this.data[idx] = value;
    }
}

template <Type, Length_>
implement Array<Type, Length_>{
    @inline
    func Length()->i64{
        return Length_;
    }

    @inline
    func Cumprod()->Type{
        var re = 1i64.Cast<Type>();
        for i in 0 to Length_{
            re = re * this[i];
        }
        return re;
    }

    @static
    @inline
    func One()->Array<Type, Length_>{
        var tmp = 1i64.Cast<Type>();
        var re_one : Array<Type, Length_>;
        for i in 0 to re_one.Length() {
            re_one[i] = tmp;
        }
        return re_one;
    }
}

template <Type, Length_>
implement operator::Add<Array<Type, Length_>> for Array<Type, Length_> {
    @inline
    func Add(operand: Array<Type, Length_>)->Array<Type, Length_>{
        var re : Array<Type, Length_>;
        for i in 0 to this.Length() {
            re[i] = this[i] + operand[i];
        }

        return re;
    }
}

template <Type, Length_>
implement operator::Sub<Array<Type, Length_>> for Array<Type, Length_> {
    @inline
    func Sub(operand: Array<Type, Length_>)->Array<Type, Length_>{
        var re : Array<Type, Length_>;
        for i in 0 to this.Length() {
            re[i] = this[i] - operand[i];
        }

        return re;
    }
}

