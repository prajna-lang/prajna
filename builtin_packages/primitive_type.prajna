template CastableTemplate <RealNumberType> {
    template <Bits>
    implement RealNumberType<Bits> {
        template <TargetType>
        @inline
        func Cast()->TargetType{
            return __cast<RealNumberType<Bits>, TargetType>(this);
        }
    }
}

template ArithmeticTemplate <RealNumberType> {
    template <Bits>
    implement operator::Add<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Add(operand: RealNumberType<Bits>)->RealNumberType<Bits> {
            return __add<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::Sub<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Sub(operand: RealNumberType<Bits>)->RealNumberType<Bits> {
            return __sub<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::Multiply<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Multiply(operand: RealNumberType<Bits>)->RealNumberType<Bits>{
            return __mul<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::Divide<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Divide(operand: RealNumberType<Bits>)->RealNumberType<Bits>{
            return __div<RealNumberType<Bits>>(this, operand);
        }
    }


    template <Bits>
    implement operator::Remaind<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Remaind(operand: RealNumberType<Bits>)->RealNumberType<Bits>{
            return __rem<RealNumberType<Bits>>(this, operand);
        }
    }
}


template EqualableTemplate <RealNumberType> {
    template <Bits>
    implement operator::Equal<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Equal(operand: RealNumberType<Bits>)->bool {
            return __eq<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::NotEqual<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func NotEqual(operand: RealNumberType<Bits>)->bool{
            return __ne<RealNumberType<Bits>>(this, operand);
        }
    }
}


template ComparableTemplate <RealNumberType> {
    template <Bits>
    implement operator::Equal<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Equal(operand: RealNumberType<Bits>)->bool {
            return __eq<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::NotEqual<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func NotEqual(operand: RealNumberType<Bits>)->bool{
            return __ne<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::Greater<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Greater(operand: RealNumberType<Bits>)->bool{
            return __gt<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::Less<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Less(operand: RealNumberType<Bits>)->bool{
            return __lt<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::GreaterOrEqual<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func GreaterOrEqual(operand: RealNumberType<Bits>)->bool {
            return __ge<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::LessOrEqual<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func LessOrEqual(operand: RealNumberType<Bits>)->bool {
            return __le<RealNumberType<Bits>>(this, operand);
        }
    }
}

template LogicalableTemplate <RealNumberType> {
    template <Bits>
    implement operator::And<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func And(operand: RealNumberType<Bits>)->RealNumberType<Bits> {
            return __and<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::Or<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Or(operand: RealNumberType<Bits>)->RealNumberType<Bits> {
            return __or<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::Xor<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Xor(operand: RealNumberType<Bits>)->RealNumberType<Bits> {
            return __xor<RealNumberType<Bits>>(this, operand);
        }
    }

    template <Bits>
    implement operator::Not<RealNumberType<Bits>> for RealNumberType<Bits> {
        @inline
        func Not()->RealNumberType<Bits> {
            // var _true = (-1).Cast<RealNumberType<Bits>>(); 不能这样转, 意味-1是64位的, 转128位就出错了
            var _true = 0i64.Cast<RealNumberType<Bits>>() - (1i64).Cast<RealNumberType<Bits>>();
            return __xor<RealNumberType<Bits>>(this, _true);
        }
    }
}

template CastableTemplate2 <Type> {
    implement Type {
        template <TargetType>
        @inline
        func Cast()->TargetType{
            return __cast<Type, TargetType>(this);
        }
    }
}

template ArithmeticTemplate2 <Type> {
    implement operator::Add<Type> for Type {
        @inline
        func Add(operand: Type)->Type {
            return __add<Type>(this, operand);
        }
    }

    implement operator::Sub<Type> for Type {
        @inline
        func Sub(operand: Type)->Type {
            return __sub<Type>(this, operand);
        }
    }

    implement operator::Multiply<Type> for Type {
        @inline
        func Multiply(operand: Type)->Type{
            return __mul<Type>(this, operand);
        }
    }

    implement operator::Divide<Type> for Type {
        @inline
        func Divide(operand: Type)->Type{
            return __div<Type>(this, operand);
        }
    }

    implement operator::Remaind<Type> for Type {
        @inline
        func Remaind(operand: Type)->Type{
            return __rem<Type>(this, operand);
        }
    }
}

template EqualableTemplate2 <Type> {
    implement operator::Equal<Type> for Type {
        @inline
        func Equal(operand: Type)->bool {
            return __eq<Type>(this, operand);
        }
    }

    implement operator::NotEqual<Type> for Type {
        @inline
        func NotEqual(operand: Type)->bool{
            return __ne<Type>(this, operand);
        }
    }
}


template ComparableTemplate2 <Type> {
    implement operator::Equal<Type> for Type {
        @inline
        func Equal(operand: Type)->bool {
            return __eq<Type>(this, operand);
        }
    }

    implement operator::NotEqual<Type> for Type {
        @inline
        func NotEqual(operand: Type)->bool{
            return __ne<Type>(this, operand);
        }
    }

    implement operator::Greater<Type> for Type {
        @inline
        func Greater(operand: Type)->bool{
            return __gt<Type>(this, operand);
        }
    }

    implement operator::Less<Type> for Type {
        @inline
        func Less(operand: Type)->bool{
            return __lt<Type>(this, operand);
        }
    }

    implement operator::GreaterOrEqual<Type> for Type {
        @inline
        func GreaterOrEqual(operand: Type)->bool {
            return __ge<Type>(this, operand);
        }
    }

    implement operator::LessOrEqual<Type> for Type {
        @inline
        func LessOrEqual(operand: Type)->bool {
            return __le<Type>(this, operand);
        }
    }
}

template LogicalableTemplate2 <T> {
    implement operator::And<T> for T {
        @inline
        func And(operand: T)->T {
            return __and<T>(this, operand);
        }
    }

    implement operator::Or<T> for T {
        @inline
        func Or(operand: T)->T {
            return __or<T>(this, operand);
        }
    }

    implement operator::Xor<T> for T {
        @inline
        func Xor(operand: T)->T {
            return __xor<T>(this, operand);
        }
    }

    implement operator::Not<T> for T {
        @inline
        func Not()->T {
            var _true = (-1).Cast<T>();
            return __xor<T>(this, _true);
        }
    }
}

template NegativeAndPositiveTemplate <RealNumberType> {
    template <Bits>
    implement operator::Negative<RealNumberType<Bits>> for RealNumberType<Bits>{
        @inline
        func Negative()->RealNumberType<Bits> {
            var zero = 0i64.Cast<RealNumberType<Bits>>();
            return zero - this;
        }
    }

    template <Bits>
    implement operator::Positive<RealNumberType<Bits>> for RealNumberType<Bits>{
        @inline
        func Positive()->RealNumberType<Bits> {
            return this;
        }
    }
}


template NegativeAndPositiveTemplate2 <Type> {
    implement operator::Negative<Type> for Type{
        @inline
        func Negative()->Type {
            var zero = 0i64.Cast<Type>();
            return zero - this;
        }
    }

    implement operator::Positive<Type> for Type{
        @inline
        func Positive()->Type {
            return this;
        }
    }
}

use CastableTemplate<Int>;
use ArithmeticTemplate<Int>;
use ComparableTemplate<Int>;
use NegativeAndPositiveTemplate<Int>;
use LogicalableTemplate<Int>;

use CastableTemplate<Uint>;
use ArithmeticTemplate<Uint>;
use ComparableTemplate<Uint>;
use LogicalableTemplate<Uint>;
use NegativeAndPositiveTemplate<Uint>;

use CastableTemplate<Float>;
use ArithmeticTemplate<Float>;
use ComparableTemplate<Float>;
// use LogicalableTemplate<Float>;
use NegativeAndPositiveTemplate<Float>;

use CastableTemplate2<char>;
use ArithmeticTemplate2<char>;
use ComparableTemplate2<char>;
use LogicalableTemplate2<char>;
use NegativeAndPositiveTemplate2<char>;

// use CastableTemplate2<bool>
// use ArithmeticTemplate2<bool>;
// use ComparableTemplate2<bool>;
use LogicalableTemplate2<bool>;



