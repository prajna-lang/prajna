
struct TestA {
    data: __ptr<undef>;

    data2: Ptr<i64>;
}

implement ReferenceCountable for TestA {
    func RegisterReferenceCount(){
        bindings::RegisterReferenceCount(this.data);
    }

    func DecrementReferenceCount(){
        bindings::DecrementReferenceCount(this.data);

        var ref_count = bindings::GetReferenceCount(this.data);
        if (ref_count == 0 ){
            if (__cast<__ptr<undef>, i64>(this.data) == 0) {
                bindings::free(this.data);
            }
        }

    }

    func IncrementReferenceCount(){
        bindings::IncrementReferenceCount(this.data);
        var ref_count = bindings::GetReferenceCount(this.data);
    }
}

implement Initializable for TestA {
    func Initialize(){
        this.data = __cast<i64, __ptr<undef>>(0);
    }
}

implement TestA {
    @static
    func Create(bytes: i64)->TestA{
        var self: TestA;
        self.data = bindings::malloc(bytes);
        self.RegisterReferenceCount();
        self.IncrementReferenceCount();
        return self; // 调用 copy函数
        // 退出时会调用destropy 函数
    }
}

@test
func TestMemoryManager(){
    var a : TestA;
    var a1 = TestA::Create(10); // 调用copy函数, 然后调用destroy函数
    test::Assert(bindings::GetReferenceCount(a1.data) == 1);

    var a2 = a1; // 调用copy函数
    test::Assert(bindings::GetReferenceCount(a1.data) == 2);

    {
        var sub_a0 = a1; // 变量拷贝, 调用copy函数
        test::Assert(bindings::GetReferenceCount(a1.data) == 3);

        TestA::Create(100); // 调用destroy 函数
    }

    test::Assert(bindings::GetReferenceCount(a1.data) == 2);
}

implement Ptr<i64> {
    func ThisPtr()->Ptr<i64> {
        return this;
    }
}

@test
func TestThisPtr() {
    var a = Ptr<i64>::New();
    var b = a.ThisPtr();
    test::Assert(b.ReferenceCount() == 2);
}
