struct str{
    darray: DynamicArray<char>;
    size: i64;
}

implement operator::LinearIndex<char> for str {
    func get(idx: i64)->char{
        return this.darray[idx];
    }

    func set(idx: i64, value: char){
        this.darray[idx] = value;
    }
}

implement str{
    @static
    func create(size: i64)->str{
        var str_re: str;
        str_re.darray = DynamicArray<char>::create(size+1);
        str_re.size = size;
        return str_re;
    }

    @static
    func from_char_ptr(cstr_ptr: char*)->str {
        var str_size = 0;
        while (cstr_ptr[str_size] != '\0'){
            str_size = str_size + 1;
        }
        var str_re = str::create(str_size);
        for i in 0 to str_re.size {
            str_re.darray[i] = cstr_ptr[i];
        }

        return str_re;
    }

    func print(){
        this.darray[this.size] = '\0';
        print_c(this.darray.data.raw_ptr);
    }

    func append(v: char){
        this.darray.pushBack('\0');
        this.size = this.size + 1;
        this.darray[this.size-1] = v;
    }

    func printLine() {
        var tmp = this;
        tmp.append('\n');
        tmp.print();
    }

    func tostr()->str{
        return this;
    }
}

func print2(ss:str) {
    ss.print();
}


implement reference_count::ReferenceCountable for str {
    func initialize(){
        this.size = 0;
        this.darray = DynamicArray<char>::create(1);
        this.darray[0] = '\0';
    }

    func registerReferenceCount(){

    }

    func decrementReferenceCount(){

    }

    func incrementReferenceCount(){

    }
}


implement operator::Add<str> for str {
    func Add(str_re: str)->str{
        var new_str = str::create(this.size + str_re.size);
        var i = 0;
        while (i < this.size){
            new_str.darray[i] = this.darray[i];
            i = i + 1;
        }
        var j = 0;
        while ( i < new_str.size ){
            new_str.darray[i] = str_re.darray[j];
            j = j + 1;
            i = i + 1;
        }
        // "hit11\n".print();

        return new_str;
    }
}

implement operator::Equal<str> for str{
    func Equal(rhs_str: str) -> bool{
        if(this.size!=rhs_str.size) {
            return false;
        }
        var i=0;
        while(i<this.size){
            if(rhs_str.darray[i]!=this.darray[i]) {
                return false;
            }
            i = i + 1;
        }
        return true;
    }
}

implement operator::NotEqual<str> for str{
    func NotEqual(rhs_str: str) -> bool{
         return !(this == rhs_str);
    }
}

func print(ss: str){
    ss.print();
}

func printLine(ss: str) {
    ss.printLine();
}

export str;
export print;
export printLine;
