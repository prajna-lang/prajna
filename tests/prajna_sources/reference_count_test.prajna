
struct TestA {
    data: ptr<undef>;
    data2: Ptr<i64>;
    _reference_counter: ptr<i64>;
}

implement TestA {
    func __finalize__(){
        *this._reference_counter = *this._reference_counter - 1;
        var ref_count = *this._reference_counter;
        if (ref_count == 0 ){
            if (cast<ptr<undef>, i64>(this.data) == 0) {
                bindings::free(this.data);
            }
        }

    }

    func __copy__(){
        *this._reference_counter = *this._reference_counter + 1;
        var ref_count = *this._reference_counter;
    }

    func __initialize__(){
        this.data = cast<i64, ptr<undef>>(0);
        this._reference_counter = ptr<i64>::New();
        *this._reference_counter = 1;
    }
}

implement TestA {
    @static
    func Create(bytes: i64)->TestA{
        var self: TestA;
        self.data = bindings::malloc(bytes);
        return self; // 调用 copy函数
        // 退出时会调用destropy 函数
    }
}

@test
func TestMemoryManager(){
    var a : TestA;
    var a1 = TestA::Create(10); // 调用copy函数, 然后调用destroy函数
    test::Assert(*a1._reference_counter == 1);

    var a2 = a1; // 调用copy函数
    test::Assert(*a1._reference_counter == 2);

    {
        var sub_a0 = a1; // 变量拷贝, 调用copy函数
        test::Assert(*a1._reference_counter == 3);

        TestA::Create(100); // 调用destroy 函数
    }

    test::Assert(*a1._reference_counter == 2);
}

implement Ptr<i64> {
    func ThisPtr()->Ptr<i64> {
        return this;
    }
}

@test
func TestThisPtr() {
    var a = Ptr<i64>::New();
    var b = a.ThisPtr();
    test::Assert(b.ReferenceCount() == 2);
}
