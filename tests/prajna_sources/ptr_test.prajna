

@test
func TestMain(){
    var p: Ptr<i64>;
    p.ToInt64();

    test::Assert(p.ToInt64() == 0i64);
    // test::Assert(p == Ptr<i64>::Null());
    test::Assert(p.IsNull());

    p = Ptr<i64>::New();
    test::Assert(!p.IsNull());
}

@test
func TestLocal() {
    var p: Ptr<i64>;
    p.ToInt64();

    test::Assert(p.ToInt64() == 0i64);
    test::Assert(p.IsNull());
    {
       var p1 = Ptr<i64>::New();
       test::Assert(!p1.IsNull());
       p = p1;
    }
    test::Assert(!p.IsNull());
}

@test
func TestIndex() {
    var p = Ptr<i64>::Allocate(10);
    p[9] = 10;
    test::Assert(p[9] == 10);
}


@test
func TestNested() {
    var p = Ptr<Ptr<i64>>::New();
    var pp = p[0];
    test::Assert(p[0].IsNull());

    p[0] = Ptr<i64>::New();
}

struct Tmp{
    v: i64;
}

implement Tmp {
    func __initialize__() {
        "Hit".PrintLine();
    }

    func __copy__() {
        "inc tmp".PrintLine();
    }

    func __finalize__() {
        "dec tmp".PrintLine();
    }
}

struct Tmp2{
    tmp: Tmp;
}

implement Tmp2 {
    func __initialize__() {
        "Hit2".PrintLine();
    }
}


@test
func TestAllocate() {
    var p_ts1 = Ptr<Tmp2>::New();
    p_ts1->tmp;
}

