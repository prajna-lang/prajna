
template <ValueType>
struct Node {
    next: __ptr<Node<ValueType>>;
    prev: __ptr<Node<ValueType>>;
    value: ValueType;
}

template <ValueType>
implement Node<ValueType> {
    /// @brief
    /// @warning 确保节点前面存在节点
    func InsertBefore(value: ValueType){
        var new_node = __ptr<Node<ValueType>>::New();
        (*new_node).value = value;
        (*new_node).prev = this.prev;
        (*this.prev).next = new_node;
        (*new_node).next = &this;
        this.prev = new_node;
    }

    /// @warning 确保节点后面存在节点
    func InsertAfter(value: ValueType){
        var new_node = __ptr<Node<ValueType>>::New();
        (*new_node).value = value;
        (*new_node).next = this.next;
        (*this.next).prev = new_node;
        (*new_node).prev = &this;
        this.next = new_node;
    }

    func RemoveBefore() {
        var prev_node = this.prev;
        var prev_prev_node = (*prev_node).prev;
        (*prev_prev_node).next = &this;
        this.prev = prev_prev_node;
        prev_node.Free();
    }

    func RemoveAfter() {
        var next_node = this.next;
        var next_next_node = (*next_node).next;
        this.next = next_next_node;
        (*next_next_node).prev = &this;
        next_node.Free();
    }
}

template <ValueType>
struct List {
    _head: __ptr<Node<ValueType>>;
    _end: __ptr<Node<ValueType>>;
    // 用于引用计数
    _reference_counter : __ptr<i64>;
}

template <ValueType>
implement List<ValueType> {
    func PushFront(value: ValueType) {
        (*this._head).InsertAfter(value);
    }

    func PushBack(value: ValueType) {
        (*this._end).InsertBefore(value);
    }

    /// @brief 删除头节点
    /// @warning 确保链表非空
    func PopFront() {
        (*this._head).RemoveAfter();
    }

    /// @brief 删除尾节点
    /// @warning 确保链表非空
    func PopBack() {
        (*this._end).RemoveBefore();
    }

    func End()->__ptr<Node<ValueType>> {
        return this._end;
    }

    func Begin()->__ptr<Node<ValueType>> {
        return (*this._head).next;
    }
}

template <ValueType>
implement Initializable for List<ValueType> {
    func Initialize() {
        this._head = __ptr<Node<ValueType>>::New();
        this._end = __ptr<Node<ValueType>>::New();
        (*this._head).prev = __ptr<Node<ValueType>>::Null();
        (*this._head).next = this._end;
        (*this._end).prev =  this._head;
        (*this._end).next = __ptr<Node<ValueType>>::Null();

        this._reference_counter = __ptr<i64>::New();
        *this._reference_counter = 1;
    }
}

template <ValueType>
implement Finalizable for List<ValueType> {
    // 有循环引用, 需要特殊处理一下
    func Finalize() {
        var node = this.Begin();
        while (node != this.End()) {
            (*node).prev.Free();
            node = (*node).next;
        }
        this.End().Free();
    }
}

template <ValueType>
implement ReferenceCountable for List<ValueType> {
    func RegisterReferenceCount() {}

    func IncrementReferenceCount() {
        *this._reference_counter = *this._reference_counter + 1;
    }

    func DecrementReferenceCount() {
        *this._reference_counter = *this._reference_counter - 1;
        if (*this._reference_counter == 0){
            this.Finalize();
            this._reference_counter.Free();
        }
    }
}

