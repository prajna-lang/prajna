#link("libzmq");

@extern func zmq_errno()->i32;
@extern func zmq_strerror(errnum_: i32)->ptr<char>;
@extern func zmq_version(major_: ptr<i32>, minor_: ptr<i32>, patch_: ptr<i32>);
@extern func zmq_ctx_new()->ptr<undef>;
@extern func zmq_ctx_term(context_: ptr<undef>)->i32;
@extern func zmq_ctx_shutdown (context_: ptr<undef>)->i32;
@extern func zmq_ctx_set (context_: ptr<undef>, option_: i32, optval_: i32)->i32;

@extern func zmq_ctx_get (context_: ptr<undef>, option_: i32)->i32;

/*  Old (legacy) API                                                          */
@extern func zmq_init (io_threads_: i32)->ptr<undef>;
@extern func zmq_term (context_: ptr<undef>)->i32;
@extern func zmq_ctx_destroy (context_: ptr<undef>)->i32;

struct zmq_msg_t{
    tmp: array<char, 64>;
}

@extern func zmq_msg_init (msg_: ptr<zmq_msg_t>)->i32;
@extern func zmq_msg_init_size (msg_: ptr<zmq_msg_t>, size_: i64)->i32;
@extern func zmq_msg_init_data (msg_: ptr<zmq_msg_t>, data_: ptr<undef>, size_: i64, ffn_: ptr<function<ptr<undef>, ptr<undef>, void>>, hint_: ptr<undef>)->i32;
@extern func zmq_msg_send (msg_: ptr<zmq_msg_t>, s_: ptr<undef>, flags_: i32)->i32;
@extern func zmq_msg_recv (msg_: ptr<zmq_msg_t>, s_: ptr<undef>, flags_: i32)->i32;
@extern func zmq_msg_close (msg_: ptr<zmq_msg_t>)->i32;
@extern func zmq_msg_move (dest_: ptr<zmq_msg_t>, src_: ptr<zmq_msg_t>)->i32;
@extern func zmq_msg_copy (dest_: ptr<zmq_msg_t>, src_: ptr<zmq_msg_t>)->i32;
@extern func zmq_msg_data (msg_: ptr<zmq_msg_t>)->ptr<undef>;
@extern func zmq_msg_size (msg_: ptr<zmq_msg_t>)->i64;
@extern func zmq_msg_more (msg_: ptr<zmq_msg_t>)->i32;
@extern func zmq_msg_get (msg_: ptr<zmq_msg_t>, property_: i32)->i32;
@extern func zmq_msg_set (msg_: ptr<zmq_msg_t>, property_: i32, optval_: i32)->i32;
@extern func mq_msg_gets (msg_: ptr<zmq_msg_t>, property_: ptr<char>)->ptr<char>;

@extern func zmq_socket (tmp: ptr<undef>, type_: i32)->ptr<undef>;
@extern func zmq_close (s_: ptr<undef>)->i32;
@extern func zmq_setsockopt (s_: ptr<undef>, option_: i32, optval_: ptr<undef>, optvallen_: i64)->i32;
@extern func zmq_getsockopt (s_: ptr<undef>, option_: i32, optval_: ptr<undef>, optvallen_: ptr<i64>)->i32;
@extern func zmq_bind (s_: ptr<undef>, addr_: ptr<char>)->i32;
@extern func zmq_connect (s_: ptr<undef>, addr_: ptr<char>)->i32;
@extern func zmq_unbind (s_: ptr<undef>, addr_: ptr<char>)->i32;
@extern func zmq_disconnect (s_: ptr<undef>, addr_: ptr<char>)->i32;
@extern func zmq_send (s_: ptr<undef>, buf_: ptr<char>, len_: i64, flags_: i32)->i32;
@extern func zmq_send_const (s_: ptr<undef>, buf_: ptr<undef>, len_: i64, flags_: i32)->i32;
@extern func zmq_recv (s_: ptr<undef>, buf_: ptr<char>, len_: i64, flags_: i32)->i32;
@extern func zmq_socket_monitor (s_: ptr<undef>, addr_: ptr<char>, events_: i32)->i32;

struct Socket {
    _context: ptr<undef>;
    _socket: ptr<undef>;
}


implement Socket {
    func __initialize__() {
        this._context = zmq_ctx_new();
        debug::Assert(this._context.IsValid());
    }

    func __finalize__() {
        if (this._socket.IsValid()) {
            zmq_close(this._socket);
        }
        zmq_ctx_destroy(this._context);
    }

    func Init(flag: i32){
        this._socket = zmq_socket(this._context, flag);
        debug::Assert(this._socket.IsValid());
    }

    func Bind(ip: String) {
        var ip = "tcp://localhost:5555";
        var re = zmq_connect(this._socket, ip.CStringRawPointer());
        debug::Assert(re == 0i32);
    }

    func Send(msg: String) {
        var re = zmq_send(this._socket, msg.CStringRawPointer(), msg.Length(), 0i32);
        debug::Assert(re > 0i32);
    }

    func Receive(len: i64) -> String {
        var msg = String::Create(len);
        var re = zmq_recv(this._socket, msg.CStringRawPointer(), msg.Length(), 0i32);
        debug::Assert(re > 0i32);
        return msg;
    }
}

