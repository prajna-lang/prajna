template CastableTemplate <RealNumberType> {
    template <Bits>
    implement RealNumberType<Bits> {
        template <TargetType>
        @inline
        func Cast()->TargetType{
            return cast<RealNumberType<Bits>, TargetType>(this);
        }
    }
}

template ArithmeticTemplate <RealNumberType> {
    template <Bits>
    implement RealNumberType<Bits> {
        @inline
        func __add__(operand: RealNumberType<Bits>)->RealNumberType<Bits> {
            return __add<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __sub__(operand: RealNumberType<Bits>)->RealNumberType<Bits> {
            return __sub<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __multiply__(operand: RealNumberType<Bits>)->RealNumberType<Bits>{
            return __mul<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __divide__(operand: RealNumberType<Bits>)->RealNumberType<Bits>{
            return __div<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __remaind__(operand: RealNumberType<Bits>)->RealNumberType<Bits>{
            return __rem<RealNumberType<Bits>>(this, operand);
        }
    }
}


template EqualableTemplate <RealNumberType> {
    template <Bits>
    implement RealNumberType<Bits> {
        @inline
        func __equal__(operand: RealNumberType<Bits>)->bool {
            return __eq<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __not_equal__(operand: RealNumberType<Bits>)->bool{
            return __ne<RealNumberType<Bits>>(this, operand);
        }
    }
}


template ComparableTemplate <RealNumberType> {
    template <Bits>
    implement RealNumberType<Bits> {
        @inline
        func __equal__(operand: RealNumberType<Bits>)->bool {
            return __eq<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __not_equal__(operand: RealNumberType<Bits>)->bool{
            return __ne<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __greater__(operand: RealNumberType<Bits>)->bool{
            return __gt<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __less__(operand: RealNumberType<Bits>)->bool{
            return __lt<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __greater_or_equal__(operand: RealNumberType<Bits>)->bool {
            return __ge<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __less_or_equal__(operand: RealNumberType<Bits>)->bool {
            return __le<RealNumberType<Bits>>(this, operand);
        }
    }
}

template LogicalableTemplate <RealNumberType> {
    template <Bits>
    implement RealNumberType<Bits> {
        @inline
        func __and__(operand: RealNumberType<Bits>)->RealNumberType<Bits> {
            return __and<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __or__(operand: RealNumberType<Bits>)->RealNumberType<Bits> {
            return __or<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __xor__(operand: RealNumberType<Bits>)->RealNumberType<Bits> {
            return __xor<RealNumberType<Bits>>(this, operand);
        }

        @inline
        func __not__()->RealNumberType<Bits> {
            // var _true = (-1).Cast<RealNumberType<Bits>>(); 不能这样转, 意味-1是64位的, 转128位就出错了
            var _true = 0i64.Cast<RealNumberType<Bits>>() - (1i64).Cast<RealNumberType<Bits>>();
            return __xor<RealNumberType<Bits>>(this, _true);
        }
    }
}

template CastableTemplate2 <Type> {
    implement Type {
        template <TargetType>
        @inline
        func Cast()->TargetType{
            return cast<Type, TargetType>(this);
        }
    }
}

template ArithmeticTemplate2 <Type> {
    implement Type {
        @inline
        func __add__(operand: Type)->Type {
            return __add<Type>(this, operand);
        }

        @inline
        func __sub__(operand: Type)->Type {
            return __sub<Type>(this, operand);
        }

        @inline
        func __multiply__(operand: Type)->Type{
            return __mul<Type>(this, operand);
        }

        @inline
        func __divide__(operand: Type)->Type{
            return __div<Type>(this, operand);
        }

        @inline
        func __remaind__(operand: Type)->Type{
            return __rem<Type>(this, operand);
        }
    }
}

template EqualableTemplate2 <Type> {
    implement Type {
        @inline
        func __equal__(operand: Type)->bool {
            return __eq<Type>(this, operand);
        }

        @inline
        func __not_equal__(operand: Type)->bool{
            return __ne<Type>(this, operand);
        }
    }
}


template ComparableTemplate2 <Type> {
    implement Type {
        @inline
        func __equal__(operand: Type)->bool {
            return __eq<Type>(this, operand);
        }

        @inline
        func __not_equal__(operand: Type)->bool{
            return __ne<Type>(this, operand);
        }

        @inline
        func __greater__(operand: Type)->bool{
            return __gt<Type>(this, operand);
        }

        @inline
        func __less__(operand: Type)->bool{
            return __lt<Type>(this, operand);
        }

        @inline
        func __greater_or_equal__(operand: Type)->bool {
            return __ge<Type>(this, operand);
        }

        @inline
        func __less_or_equal__(operand: Type)->bool {
            return __le<Type>(this, operand);
        }
    }
}

template LogicalableTemplate2 <T> {
    implement T {
        @inline
        func __and__(operand: T)->T {
            return __and<T>(this, operand);
        }

        @inline
        func __or__(operand: T)->T {
            return __or<T>(this, operand);
        }

        @inline
        func __xor__(operand: T)->T {
            return __xor<T>(this, operand);
        }

        @inline
        func __not__()->T {
            var _true = (-1).Cast<T>();
            return __xor<T>(this, _true);
        }
    }
}

template NegativeAndPositiveTemplate <RealNumberType> {
    template <Bits>
    implement RealNumberType<Bits>{
        @inline
        func __negative__()->RealNumberType<Bits> {
            var zero = 0i64.Cast<RealNumberType<Bits>>();
            return zero - this;
        }

        @inline
        func __positive__()->RealNumberType<Bits> {
            return this;
        }
    }
}


template NegativeAndPositiveTemplate2 <Type> {
    implement Type{
        @inline
        func __negative__()->Type {
            var zero = 0i64.Cast<Type>();
            return zero - this;
        }

        @inline
        func __positive__()->Type {
            return this;
        }
    }
}

use CastableTemplate<Int>;
use ArithmeticTemplate<Int>;
use ComparableTemplate<Int>;
use NegativeAndPositiveTemplate<Int>;
use LogicalableTemplate<Int>;

use CastableTemplate<Uint>;
use ArithmeticTemplate<Uint>;
use ComparableTemplate<Uint>;
use LogicalableTemplate<Uint>;
use NegativeAndPositiveTemplate<Uint>;

use CastableTemplate<Float>;
use ArithmeticTemplate<Float>;
use ComparableTemplate<Float>;
// use LogicalableTemplate<Float>;
use NegativeAndPositiveTemplate<Float>;

use CastableTemplate2<char>;
use ArithmeticTemplate2<char>;
use ComparableTemplate2<char>;
use LogicalableTemplate2<char>;
use NegativeAndPositiveTemplate2<char>;

// use CastableTemplate2<bool>
// use ArithmeticTemplate2<bool>;
// use ComparableTemplate2<bool>;
use LogicalableTemplate2<bool>;

