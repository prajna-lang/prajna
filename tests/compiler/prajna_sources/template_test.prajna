template <T>
struct Node {
    value: T;
    next: __ptr<Node<T>>;
}

template <T>
implement Node<T>{
    func nextValue()->T{
        return (*this.next).value;
    }
}

use Node<f32>;

template <T>
implement Node<T>{
    func nextValue2()->T{
        return this.nextValue();
    }
}

template ptrTp <Type>{
    implement __ptr<Type> {
        func Test(){}
    }
}

use ptrTp<i64>;

template <Type, Length>
struct MyArray {
    data: __array<Type, Length>;
}

@test
func Test(){
    var root: Node<f32>;
    root.value = 1.0;
    var next_node: Node<f32>;
    next_node.value = 2.0;
    root.next = &next_node;
    root.nextValue2();

    var tt: __ptr<i64>;
    tt.Test();
    root.nextValue();

    var tmp: MyArray<i64, 2>;
    test::Assert(root.nextValue() == 2.0);
}

