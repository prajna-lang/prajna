
template <T>
func Print(value: T) {
    value.ToString().Print();
}

struct Tmp{
    a: i64;
};

implement Tmp {

    template <T>
    func Create()->T {
        var tmp: T;
        return tmp;
    }

    template <T>
    @static
    func Create2()->T {
        var tmp: T;
        return tmp;
    }


};


@test
func TestMain() {
    "\n".Print();
    Print<i64>(4);

    var tmp: Tmp;
    tmp.Create<f32>();
    Tmp::Create2<f32>();
    var t = f32::Sin;
}

use Float<32>;

@test
func TestScopeAccess() {
    var f0 = Tmp::Create<f32>;
    var f1 = Tmp::Create2<f16>;
    var f2 = f32::Sin;
    var f3 = f32::Cos;
    f2 = f32::Sin;
    var f4 = f32::__add__;

    var a = 3.1415 / 2.0;
    f2(&a);
    f3(&a);
}
