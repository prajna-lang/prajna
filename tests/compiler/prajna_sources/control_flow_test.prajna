
func TestIfElse(a: bool)->i64 {
    var b: i64;
    if (a){
        b = 4;
    } else {
        b = 5;
    }

    return b;
}

func TestWhileTmpe(){
    while(true){

    }
}

func TestWhile(size: i64)->i64{
    var tmp = 0;
    var i = 0;
    while (i < size) {
        if (i % 2 == 0){
            tmp = tmp + i;
        }
        i = i + 1;
    }

    return tmp;
}

func TestFor(){
    {
        var first = 0;
        var last = 100;
        var tmp = 0;
        // for获取的是first和last值, 获取后不会再被改变
        for i in first to last{
            tmp = tmp + i;
            // 不影响循环
            first = 100;
            last = 0;
            i = i + 1;
        }

        test::Assert(tmp == 4950);
    }
    {
        var j =  0;
        for i in 0 to 10 {
            if (i == 2){
                break;
            }
            j  = j + 1;
        }
        test::Assert(j == 2);
    }
    {
        var i =  0;
        var j = 0;
        for i in 0 to 10 {
            if (i == 2){
                 continue;
            }
            j = j + 1;
        }
        test::Assert(j == 9);
    }

    {
        var first = [0, 0];
        var last = [10, 10];
        for idx in first to last {
            idx.ToString().Print();
        }
    }
}


func TestBreak()->i64{
    var i = 0;
    while (i < 10){
        i = i + 1;
        if (i == 2){
            break;
        }
    }

    return i;
}

func TestContinue()->i64{
    var i = 0;
    var j = 0;
    while (i < 10){
        i = i + 1;
        if (i == 2){
            continue;
        }
        j = j + 1;
    }

    return j;
}

@test
func TestControlFlow(){
    test::Assert(TestIfElse(true) == 4);
    test::Assert(TestIfElse(false) == 5);

    test::Assert(TestWhile(0) == 0);
    test::Assert(TestWhile(5) == 6);
    test::Assert(TestWhile(10) == 20);

    test::Assert(TestBreak() == 2);
    test::Assert(TestContinue() == 9);

    TestFor();

    return;
}
