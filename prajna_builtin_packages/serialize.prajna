implement Serializable for char {
    func ToString()->String{
        var re = String::Create(1);
        re.darray[0] = this;
        return re;
    }
}

template <Bits>
implement Serializable for Uint<Bits>{
    func ToString()->String{
        var zero = 0i64.Cast<Uint<Bits>>();
        var one = 1i64.Cast<Uint<Bits>>();
        var ten = 10i64.Cast<Uint<Bits>>();
        if (this == zero){
            return "0";
        }

        // 十进制只有一位, 直接返回
        if (Bits <= 3) {
            return (this.Cast<char>() + '0').ToString();
        }

        var temp = this;
        var inverse_re = "";
        while (temp != zero){
            inverse_re.Push((temp % ten).Cast<char>() + '0');
            temp = temp / ten;
        }

        var re = String::Create(inverse_re.Length());
        var j = 0;
        while (j < re.Length()){
            re.darray[j] = inverse_re.darray[inverse_re.Length()-j-1];
            j = j + 1;
        }

        return re;
    }
}

template <Bits>
implement Serializable for Int<Bits>{
    func ToString()->String{
        var zero = 0i64.Cast<Int<Bits>>();
        if (this >= zero) {
            return this.Cast<Uint<Bits>>().ToString();
        } else {
            return "-" + ((!this).Cast<Uint<Bits>>() + (1).Cast<Uint<Bits>>()).ToString();
            // -128i8 无法转为128i8, 因为越界了, 会直接崩溃.
            // return "-" + (-this).ToString();
        }
    }
}

implement Serializable for bool{
    func ToString()->String{
        if (this){
            return "true";
        } else {
            return "false";
        }
    }
}


template <Bits>
implement Serializable for Float<Bits>{
    func ToString()->String{
        if (this > 0.00001.Cast<Float<Bits>>()){
            var float_fixed_printer: FloatFixedPrinter<Float<Bits>>;
            return float_fixed_printer.ConvertFloatToString(this);
        } else {
            var float_scientific_printer : FloatScientificPrinter<Float<Bits>>;
            return float_scientific_printer.ConvertFloatToString(this);
        }

    }
}

template <Type, Dim>
implement Serializable for Array<Type, Dim>{
    func ToString()->String{
        var re = "[";
        for i in 0 to Dim {
            re = re + this[i].ToString() + ",";
        }
        re = re + "]";

        return re;
    }
}

