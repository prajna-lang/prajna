struct String{
    darray: DynamicArray<char>;
}

implement String {
    func __get_linear_index__(idx: i64)->char{
        return this.darray[idx];
    }

    func __set_linear_index__(idx: i64, value: char){
        this.darray[idx] = value;
    }
}

implement String{
    @static
    func Create(length: i64)->String{
        var str_re: String;
        str_re.darray = DynamicArray<char>::Create(length+1);
        return str_re;
    }

    func Length()->i64 {
        return this.darray.Length() - 1;
    }

    @static
    func __from_char_ptr(cstr_ptr: ptr<char>)->String {
        var length = 0;
        while (cstr_ptr[length] != '\0'){
            length = length + 1;
        }
        var str_re = String::Create(length);
        for i in 0 to str_re.Length() {
            str_re.darray[i] = cstr_ptr[i];
        }

        return str_re;
    }

    func CStringRawPointer()->ptr<char> {
        this[this.Length()] = '\0';
        return this.darray._data.raw_ptr;
    }

    func Print(){
        bindings::print(this.CStringRawPointer());
    }

    func Push(v: char){
        this[this.Length()] = v;
        this.darray.Push('\0');
    }

    func Pop(){
        this.darray.Pop();
        this[this.Length()] = '\0';
    }

    func Resize(length: i64) {
        this.darray.Resize(length + 1);
    }

    func PrintLine() {
        this.Push('\n');
        this.Print();
        this.Pop();
    }

    func ToString()->String{
        return this;
    }
}

implement String {
    func __add__(str_re: String)->String{
        var new_str = String::Create(this.Length() + str_re.Length());
        var i = 0;
        while (i < this.Length()){
            new_str.darray[i] = this.darray[i];
            i = i + 1;
        }
        var j = 0;
        while ( i < new_str.Length() ){
            new_str.darray[i] = str_re.darray[j];
            j = j + 1;
            i = i + 1;
        }

        return new_str;
    }
}

implement String{
    func __equal__(rhs_str: String) -> bool{
        if(this.Length()!=rhs_str.Length()) {
            return false;
        }
        var i=0;
        while(i<this.Length()){
            if(rhs_str.darray[i]!=this.darray[i]) {
                return false;
            }
            i = i + 1;
        }
        return true;
    }
}

implement String{
    func __not_equal__(rhs_str: String) -> bool{
         return !(this == rhs_str);
    }
}
