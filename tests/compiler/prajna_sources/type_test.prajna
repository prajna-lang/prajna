template RealNumberTypeTest <Type> {
    @test
    func TestCast() {
        var tmp: Type;
        tmp.Cast<i8>();
        tmp.Cast<i16>();
        tmp.Cast<i32>();
        tmp.Cast<i64>();
        // tmp.Cast<Int<128>>(); //需要soft-fp的支持

        tmp.Cast<u8>();
        tmp.Cast<u16>();
        tmp.Cast<u32>();
        tmp.Cast<i64>();
        // tmp.Cast<Uint<128>>();

        tmp.Cast<f16>();
        tmp.Cast<f32>();
        tmp.Cast<f64>();
    }

    @test
    func TestArithmetic(){
       test::Assert(1i64.Cast<Type>() + 2i64.Cast<Type>() == 3i64.Cast<Type>());
       test::Assert(3i64.Cast<Type>() - 1i64.Cast<Type>() == 2i64.Cast<Type>());
       test::Assert(1i64.Cast<Type>() * 2i64.Cast<Type>() == 2i64.Cast<Type>());
       test::Assert(6i64.Cast<Type>() / 3i64.Cast<Type>() == 2i64.Cast<Type>());
       test::Assert(5i64.Cast<Type>() % 2i64.Cast<Type>() == 1i64.Cast<Type>());
    }

    @test
    func TestCompare() {
        test::Assert(1i64.Cast<Type>() > 0i64.Cast<Type>());
        test::Assert(1i64.Cast<Type>() >= 1i64.Cast<Type>());
        test::Assert(1i64.Cast<Type>() < 2i64.Cast<Type>());
        test::Assert(1i64.Cast<Type>() <= 1i64.Cast<Type>());
        test::Assert(1i64.Cast<Type>() == 1i64.Cast<Type>());
        test::Assert(1i64.Cast<Type>() != 0i64.Cast<Type>());
    }

    @test
    func TestNegativeAndPositiveUnary() {
        var tmp: Type;
        +tmp;
        -tmp;
    }
}

template LogicalTypeTest <Type>{
    @test
    func TestLogical() {
        test::Assert(1i64.Cast<Type>() & 0i64.Cast<Type>() == 0i64.Cast<Type>());
        test::Assert(1i64.Cast<Type>() | 2i64.Cast<Type>() == 3i64.Cast<Type>());
        test::Assert(1i64.Cast<Type>() ^ 0i64.Cast<Type>() == 1i64.Cast<Type>());
        // not test by Max and Min
    }
}

use RealNumberTypeTest<Int<4>>;
use RealNumberTypeTest<Int<8>>;
use RealNumberTypeTest<Int<16>>;
use RealNumberTypeTest<Int<32>>;
use RealNumberTypeTest<Int<64>>;
// use RealNumberTypeTest<Int<128>>; //Int<128>和Float<16>之间的装换不完善
use RealNumberTypeTest<Uint<4>>;
use RealNumberTypeTest<Uint<8>>;
use RealNumberTypeTest<Uint<16>>;
use RealNumberTypeTest<Uint<32>>;
use RealNumberTypeTest<Uint<64>>;
// use RealNumberTypeTest<Uint<128>>;

use LogicalTypeTest<Int<4>>;
use LogicalTypeTest<Int<8>>;
use LogicalTypeTest<Int<16>>;
use LogicalTypeTest<Int<32>>;
use LogicalTypeTest<Int<64>>;
// use LogicalTypeTest<Int<128>>;
use LogicalTypeTest<Uint<8>>;
use LogicalTypeTest<Uint<16>>;
use LogicalTypeTest<Uint<32>>;
use LogicalTypeTest<Uint<64>>;
// use LogicalTypeTest<Uint<128>>;

use RealNumberTypeTest<Float<16>>;
use RealNumberTypeTest<Float<32>>;
use RealNumberTypeTest<Float<64>>;
//  目前llvm对f128的支持并不完善
// use RealNumberTypeTest<Float<128>>; // %存在问题,
